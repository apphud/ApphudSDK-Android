// Generated by view binder compiler. Do not edit!
package com.apphud.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.apphud.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListItemProductBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView idPrice;

  @NonNull
  public final TextView idTitle;

  @NonNull
  public final TextView nameTitle;

  @NonNull
  public final TextView productId;

  @NonNull
  public final TextView productName;

  @NonNull
  public final TextView productPrice;

  private ListItemProductBinding(@NonNull LinearLayout rootView, @NonNull TextView idPrice,
      @NonNull TextView idTitle, @NonNull TextView nameTitle, @NonNull TextView productId,
      @NonNull TextView productName, @NonNull TextView productPrice) {
    this.rootView = rootView;
    this.idPrice = idPrice;
    this.idTitle = idTitle;
    this.nameTitle = nameTitle;
    this.productId = productId;
    this.productName = productName;
    this.productPrice = productPrice;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListItemProductBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListItemProductBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_item_product, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListItemProductBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.idPrice;
      TextView idPrice = rootView.findViewById(id);
      if (idPrice == null) {
        break missingId;
      }

      id = R.id.idTitle;
      TextView idTitle = rootView.findViewById(id);
      if (idTitle == null) {
        break missingId;
      }

      id = R.id.nameTitle;
      TextView nameTitle = rootView.findViewById(id);
      if (nameTitle == null) {
        break missingId;
      }

      id = R.id.productId;
      TextView productId = rootView.findViewById(id);
      if (productId == null) {
        break missingId;
      }

      id = R.id.productName;
      TextView productName = rootView.findViewById(id);
      if (productName == null) {
        break missingId;
      }

      id = R.id.productPrice;
      TextView productPrice = rootView.findViewById(id);
      if (productPrice == null) {
        break missingId;
      }

      return new ListItemProductBinding((LinearLayout) rootView, idPrice, idTitle, nameTitle,
          productId, productName, productPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
