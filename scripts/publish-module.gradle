apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
    }
}

task androidJavadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    // For Android libraries, create an empty javadoc jar or generate from KDoc
    // You can customize this to generate actual documentation
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up later
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                // Two artifacts, the `aar` (or `jar`) and the sources
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    artifact("$buildDir/libs/${project.getName()}-${version}.jar")
                }

                artifact androidSourcesJar
                artifact androidJavadocJar

                // Mostly self-explanatory metadata
                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = PUBLISH_DESCRIPTION
                    url = PUBLISH_URL
                    licenses {
                        license {
                            name = PUBLISH_LICENSE_NAME
                            url = PUBLISH_LICENSE_URL
                        }
                    }
                    developers {
                        developer {
                            id = PUBLISH_DEVELOPER_ID
                            name = PUBLISH_DEVELOPER_NAME
                            email = PUBLISH_DEVELOPER_EMAIL
                        }
                    }

                    // Version control info - if you're using GitHub, follow the
                    // format as seen here
                    scm {
                        connection = PUBLISH_SCM_CONNECTION
                        developerConnection = PUBLISH_SCM_DEVELOPER_CONNECTION
                        url = PUBLISH_SCM_URL
                    }
                }
            }
        }
    }
}

ext["signing.keyId"] = rootProject.ext["signing.keyId"]
ext["signing.password"] = rootProject.ext["signing.password"]
ext["signing.secretKeyRingFile"] = rootProject.ext["signing.secretKeyRingFile"]

signing {
    sign publishing.publications
}

// Task to generate Central Publisher Portal archive
task generateCentralPortalArchive(type: Zip) {
    dependsOn 'publishToMavenLocal'
    
    archiveFileName = "${PUBLISH_ARTIFACT_ID}-${PUBLISH_VERSION}-central-portal.zip"
    destinationDirectory = file("${project.buildDir}/central-portal")
    
    doFirst {
        def localRepo = "${System.getProperty('user.home')}/.m2/repository"
        def artifactPath = "${PUBLISH_GROUP_ID.replace('.', '/')}/${PUBLISH_ARTIFACT_ID}/${PUBLISH_VERSION}"
        def sourceDir = file("${localRepo}/${artifactPath}")
        
        if (!sourceDir.exists()) {
            throw new GradleException("Local Maven repository artifacts not found at ${sourceDir}. Run 'publishToMavenLocal' first.")
        }
        
        // Create temp directory for archive structure
        def tempDir = file("${buildDir}/tmp/central-portal-archive")
        def targetDir = file("${tempDir}/${artifactPath}")
        targetDir.mkdirs()
        
        // Copy all files from local Maven repo
        copy {
            from sourceDir
            into targetDir
        }
        
        // Generate checksums and signatures for required files
        fileTree(targetDir).matching {
            include '*.aar', '*.pom', '*.jar'
            exclude '*.asc', '*.md5', '*.sha1'
        }.each { file ->
            generateChecksumsAndSignatures(file)
        }
        
        // Set the archive source to our temp directory
        from tempDir
    }
}

def generateChecksumsAndSignatures(File file) {
    def fileName = file.name
    def parentDir = file.parent
    
    // Generate MD5 checksum
    def md5File = new File(parentDir, "${fileName}.md5")
    md5File.text = calculateMd5(file)
    
    // Generate SHA1 checksum
    def sha1File = new File(parentDir, "${fileName}.sha1")
    sha1File.text = calculateSha1(file)
    
    // Generate GPG signature (if GPG is available)
    try {
        def ascFile = new File(parentDir, "${fileName}.asc")
        def process = "gpg --armor --detach-sign --output ${ascFile.absolutePath} ${file.absolutePath}".execute()
        process.waitFor()
        if (process.exitValue() != 0) {
            logger.warn("GPG signing failed for ${fileName}. Please ensure GPG is installed and configured.")
        }
    } catch (Exception e) {
        logger.warn("GPG signing failed for ${fileName}: ${e.message}")
    }
}

def calculateMd5(File file) {
    def digest = java.security.MessageDigest.getInstance("MD5")
    file.eachByte(4096) { buffer, length ->
        digest.update(buffer, 0, length)
    }
    return digest.digest().collect { String.format("%02x", it) }.join('')
}

def calculateSha1(File file) {
    def digest = java.security.MessageDigest.getInstance("SHA-1")
    file.eachByte(4096) { buffer, length ->
        digest.update(buffer, 0, length)
    }
    return digest.digest().collect { String.format("%02x", it) }.join('')
}